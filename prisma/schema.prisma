generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model TableTennisPlayer {
    id        String   @id @default(cuid())
    name      String
    elo       Int      @default(1200)
    office    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, office])
    @@index([name])
    @@index([id])
}

model TableTennisMatch {
    id            String   @id @default(cuid())
    player1Id     String
    player2Id     String
    winner        String
    prePlayer1Elo Int
    prePlayer2Elo Int
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@index([player1Id])
    @@index([player2Id])
    @@index([winner])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    TeamUser      TeamUser[]
    Elo           LeagueUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id            String     @id @default(cuid())
    name          String
    createdAt     DateTime   @default(now())
    TeamUser      TeamUser[]
    AdminTeam     Team?      @relation("team_role_adminId")
    ModeratorTeam Team?      @relation("team_role_moderatorId")
    MemberTeam    Team?      @relation("team_role_memberId")
}

model Team {
    id              String        @id @default(cuid())
    name            String        @unique
    image           String?
    description     String?
    password        String?
    createdAt       DateTime      @default(now())
    adminRoleId     String        @unique
    moderatorRoleId String        @unique
    memberRoleId    String        @unique
    RoleAdmin       Role          @relation("team_role_adminId", fields: [adminRoleId], references: [id])
    RoleModerator   Role          @relation("team_role_moderatorId", fields: [moderatorRoleId], references: [id])
    RoleMember      Role          @relation("team_role_memberId", fields: [memberRoleId], references: [id])
    League          League[]
    TeamUser        TeamUser[]
    LeagueUser      LeagueUser[]
    LeagueMatch     LeagueMatch[]
}

model TeamUser {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    team      Team     @relation(fields: [teamId], references: [id])
    teamId    String
    role      Role     @relation(fields: [roleId], references: [id])
    roleId    String
    image     String   @default("https://github.com/shadcn.png")
    gamerTag  String   @default("GamerTagTeamUser")
    createdAt DateTime @default(now())

    @@unique([userId, teamId])
}

model League {
    id         String        @id @default(cuid())
    name       String        @unique
    teamId     String
    Team       Team          @relation(fields: [teamId], references: [id])
    LeagueUser LeagueUser[]
    MatchCount Int           @default(0)
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    Match      LeagueMatch[]
}

model LeagueUser {
    id            String       @id @default(cuid())
    userId        String
    user          User         @relation(fields: [userId], references: [id])
    teamId        String
    team          Team         @relation(fields: [teamId], references: [id])
    leagueId      String
    league        League       @relation(fields: [leagueId], references: [id])
    elo           Int          @default(1200)
    streak        Int          @default(0)
    matchCount    Int          @default(0)
    latestEloGain Int[]        @default([])
    WinnerMatch   LeagueMatch? @relation("match_winner_id")
    LoserMatch    LeagueMatch? @relation("match_loser_id")
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@unique([userId, leagueId])
}

model LeagueMatch {
    id               String     @id @default(cuid())
    winnerId         String     @unique
    loserId          String     @unique
    WinnerLeagueUser LeagueUser @relation("match_winner_id", fields: [winnerId], references: [id])
    LoserLeagueUser  LeagueUser @relation("match_loser_id", fields: [loserId], references: [id])
    teamId           String
    team             Team       @relation(fields: [teamId], references: [id])
    leagueId         String
    league           League     @relation(fields: [leagueId], references: [id])
    preWinnerElo     Int
    preLoserElo      Int
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt

    @@index([winnerId])
    @@index([loserId])
}
